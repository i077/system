#!/usr/bin/env fish

# Spawn a python environment (and run it) with the given list of packages.

set _dir (dirname (status filename))
source $_dir/_lib.fish

set FLAKE "github:DavHau/mach-nix"

function usage
    echo "pywith - Quickly spawn Python environments

"$bold"Usage:"$resf"
    pywith [options...] <package>...
    pywith [options...] (-r | --requirements) <file>

"$bold"Options:"$resf"
    -h, --help              Print this help message
    -c, --command=<cmd>     Run <cmd> in the built shell (default: python)
    -s, --shell             Same as '-c $SHELL'
    -f, --file=<file>       Interpret <file> with built Python env
    -r, --requirements      Read packages from a text file
    -R                      Same as '-r ./requirements.txt'

"$bold"Examples:"$resf"
    pywith numpy scipy          # Open a python REPL with the numpy and scipy packages available
    pywith -R                   # Open a python REPL with packages from ./requirements.txt
    pywith -s requests          # Open a shell with a python that has the requests library
    pywith -f script.py numpy   # Interpret script.py using a python with numpy available
"
end

argparse h/help 'c/command=' s/shell 'f/file=' 'r/requirements=' R -- $argv; or exit 127

if set -q _flag_help
    usage
    exit 0
end

# Give a default command if none was given
if set -q _flag_command; and begin
        set -q _flag_file; or set -q _flag_shell
    end
    log_error "Options --command, --file, and --shell are mutually exclusive."
    exit 127
else if set -q _flag_command
    set cmd $_flag_command
else if set -q _flag_shell
    set cmd $SHELL
else if set -q _flag_file
    if not stat $_flag_file >/dev/null
        log_error "Couldn't read file: "$_flag_file
        exit 2
    end
    set cmd python $_flag_file
else
    set cmd python
end


if set -q _flag_requirements; or set -q _flag_R
    # If -r or -R was passed, read from the given requirements file
    if set -q _flag_R
        set reqfile './requirements.txt'
    else
        set reqfile $_flag_requirements
    end
    set currentSystem (nix-instantiate --eval -E 'builtins.currentSystem')

    log_step "Reading packages from "$reqfile"..."

    # Build the python environment with requirements.txt, and capture the JSON output
    # Unforunately 'mach-nix gen -r <file>' isn't working right now, so I have to
    # use the mkPython function in a nix expression.
    set build_json (nix build --impure --no-link --json \
       --expr '(builtins.getFlake "'$FLAKE'").lib.'$currentSystem'.mkPython {
          requirements = builtins.readFile '$reqfile'; }')
    if test -z build_json
        log_error "mach-nix couldn't build the Python environment"
        exit 1
    end
    # Grab the derivation path from the JSON and spawn a shell using the derivation
    set drvPath (echo $build_json | jq -r 'first | .drvPath')
    nix shell $drvPath --command $cmd
else
    # No -r/-R was passsed, so continue with mach-nix's pythonWith

    # If ptpython is present, we probably want that instead of python
    if contains ptpython $argv; and ! set -q _flag_command
        log_minor "Found ptpython in args, running that instead of python."
        set cmd ptpython
    end

    # Read in the packages to a chain of attributes
    set attrlist (for pkg in $argv; printf ".%s" $pkg; end)
    nix shell $FLAKE\#gen.python$attrlist --command $cmd
end
