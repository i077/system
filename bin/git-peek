#!/usr/bin/env fish

# Quickly clone a git repo in a temporary place and open it in $EDITOR
# Inspired by https://github.com/Jarred-Sumner/git-peek

set _dir (dirname (status filename))
source $_dir/_lib.fish

function usage
    echo "git-peek: Quickly look inside a git repository"
    echo
    echo -e $bold"Usage:"$resf" git-peek [options] clone-url [directory] [clone args]"
    echo
    echo -e $bold"Options:"$resf
    echo "    -h, --help            Print this help message"
    echo "    -e, --editor <name>   Open repo in <name> instead of \$EDITOR"
    echo "    -d, --depth <num>     Only clone <num> commits, or entire tree if 0 (default: 1)"
    echo "    -k, --keep            Don't delete the clone before exiting"
    echo "                          (implied if existing directory is passed)"
    echo "    -b, --branch <ref>    Clone <ref> instead of the default branch"
end

function _clean
    if test -z $_flag_keep
        log_step "Cleaning up..."
        popd
        rm -rf $clone_dir
    end
end

argparse -s 'h/help' 'e/editor=' 'k/keep' 'd/depth=' 'b/branch=' -- $argv

if test -z $argv[1]; or ! test -z $_flag_help
    usage
    exit 0
end

if ! test -z $_flag_editor
    set -g EDITOR $_flag_editor
end

# Parse arguments to git clone
if ! test -z $_flag_branch
    set branch_arg "-b $_flag_branch"
end

if ! test -z $_flag_depth
    echo $_flag_depth
    if test $_flag_depth -gt 0
        set depth_arg "--depth=$_flag_depth"
    end
else
    set depth_arg "--depth=1"
end

if test -z $argv[2]
    set -g clone_dir (mktemp -d /tmp/git-peek.XXXXXX)
else
    set -g clone_dir $argv[2]
    if ! test -e $clone_dir
        log_minor "Creating directory $clone_dir..."
        mkdir -p $clone_dir
    else if test -d $clone_dir
        log_warn "Directory $clone_dir already exists, will not delete before exiting."
        set -g _flag_keep '-k'
    else
        log_error "$clone_dir exists and is not a directory."
        exit 1
    end
end

set -g _flag_keep $_flag_keep

# Main procedure
log_step "Cloning $argv[1] into $clone_dir..."
pushd $clone_dir
if ! git clone $argv[1] $clone_dir $branch_arg $depth_arg
    log_error "Cloning was not successful."
    _clean
    exit 1
end

log_step "Opening with $EDITOR..."
$EDITOR $clone_dir
_clean
