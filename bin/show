#!/usr/bin/env fish
set _dir (dirname (status filename))
source $_dir/_lib.fish

# Show the contents of $argv[1], depending on the type.
# I wrote this because I didn't want to switch between `ls` and `cat` when previewing things in
# the terminal.

function help
    echo "show: Show the contents of a file, depending on the type

"$bold"Usage:"$resf" show <file> [args...]

All ARGS after FILE get passed to the program used to show FILE.
For example, if FILE is a directory, the resulting command run becomes:

    ls -l FILE [ARGS...]"
end



if test -z $argv[1]
    # If no argument is passed and we're in a pipe, act like a pager.
    if test -t 0 # Check if stdout is a terminal (heuristic for pipe)
        help
        exit 127
    else
        bat
    end
else if not test -e $argv[1]
    # Maybe I pressed ENTER a little too soon after TAB...
    # If there were multiple completions, prompt to pick one
    if test (count $argv[1]*) -gt 1
        set newarg1 (for f in $argv[1]*; echo $f; end | fzf --reverse --height 10)
        if test -z $newarg1
            exit 1
        end
        log_minor "Showing '"$newarg1"'..."
        show $newarg1 $argv[2..-1]
    else
        log_error "No such file: '"$argv[1]"'."
        exit 2
    end
else if test -L $argv[1]
    set linkto (readlink -f $argv[1])
    log_minor "File is a link to "$linkto
    show $linkto $argv[2..-1]
else if test -d $argv[1]
    # If the listing ends up being long, use less as a pager
    ls --color=always -l $argv | less -FR
else if test -f $argv[1]
    # If the file is a regular file, let's look at the mimetype...
    set mimetype (file --brief --mime-type $argv[1])
    set mimeencoding (file --brief --mime-encoding $argv[1])

    # For a file with binary data, try to display its contents using other programs
    if test $mimeencoding = binary
        # Display images if we're in iTerm
        if string match -q "image/*" $mimetype; and set -q TERM_PROGRAM; and test $TERM_PROGRAM = "iTerm.app"
            $_dir/imgcat --preserve-aspect-ratio --width 100% --height 90% --file $argv[1]
        else if test $mimetype = application/gzip
            file --uncompress --brief $argv
        else
            file --brief $argv
        end
    else if test $mimetype = application/json; and check_progs jq
        cat $argv[1] | jq --color-output $argv[2..-1] | less -FR
    else
        bat $argv
    end
else
    # Not sure how to handle other types at this point, so just pass them to stat
    stat $argv[1]
end
