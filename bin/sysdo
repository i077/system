#!/usr/bin/env fish
set _dir (dirname (status filename))
source $_dir/_lib.fish

# ----- SETUP -----
set flakeRoot (dirname $_dir)
set flakeAttr (hostname)

if not set -q IN_NIX_SHELL
    log_step "\$IN_NIX_SHELL not set. Rerunning in a nix shell..."
    exec nix-shell $flakeRoot/shell.nix --run (status filename)" $argv"
end

# Format to 100 columns becauase this is the 21st century
set nixfmt_width 100

cd $flakeRoot

# ----- SUBCOMMANDS -----
function usage
    echo $bold"Usage:"$resf" sysdo [flags] [verb] [options]

"$bold"Flags:$resf
    -C, --no-check      Don't run checks when building configuration
    -r, --review        Review changes in configuration before activating
    -k, --keep-result   Keep nix build output symlinks

"$bold"Verbs:"$resf"
        help            Print this help message
        clean           Clean up nix build outputs
        check           Run checks on this repository
     s, switch          Build, activate, and add boot entry for the current configuration
     b, boot            Build and add boot entry for the current configuration
     t, test            Build and activate the current configuration
        build           Build the current configuration
        update          Update flake inputs
    sh, shell           Spawn a devShell (use -c to specify a command)
        repl            Start nix repl with flake
        git             Execute a git command in this repository
        gc              Delete unreachable store paths
        GC [D]          Delete generations older than D days (60 by default)
        install N       Install N's configuration to /mnt
    up, upgrade         Run update and switch
        ub              Run update and boot
        ut              Run update and test"
end

function clean
    log_step "Cleaning up build outputs..."
    [ -L result ] && rm -f result
end

function check
    log_step "Running checks..."

    # Check that working tree is clean
    log_minor "Checking for uncommitted changes..."
    set -l unclean_files (git ls-files -m -o -d --exclude-standard)
    if test -n "$unclean_files"
        log_error "Git working tree is unclean. Commit or stash changes to these files:"
        for f in $unclean_files
            echo "- $f"
        end
        exit 1
    end

    # Reformat files (and ask to amend commit)
    # This comes after the git check since treefmt formats in-place
    log_minor "Formatting files..."
    # If there are any unformatted files...
    if not treefmt -q --fail-on-change
        set -l reformatted_files (git ls-files -m -o -d --exclude-standard)
        log_warn "The files below were re-formatted:"
        for f in $reformatted_files
            echo "- $f"
        end
        if ask_yesno "Amend the last commit with these changes?"
            git add $reformatted_files
            git commit --amend --no-edit
        else
            exit 1
        end
    end

    log_ok "Everything looks good."
end

function _rebuild_after_review
    test -z $_flag_no_check && check
    # If the step involves activating, run dry-activate first
    if contains $argv[1] test boot switch
        log_step "Building configuration..."
        nixos-rebuild dry-activate # This will leave a ./result symlink
        if not ask_yesno "Continue with the above changes?"
            exit 1
        end

        switch $argv[1]
            case switch
                log_step "Adding boot entry for and activating configuration..."
                sudo ./result/bin/switch-to-configuration switch
            case boot
                log_step "Adding boot entry for configuration..."
                sudo ./result/bin/switch-to-configuration boot
            case test
                log_step "Activating configuration..."
                sudo ./result/bin/switch-to-configuration test
        end
        test -z $_flag_keep_result && clean
        exit 0
    end

    # Otherwise, just pass to _rebuild
    _rebuild $argv[1]
end

function _rebuild
    test -z $_flag_no_check && check
    switch $argv[1]
        case switch
            log_step "Building, activating, and adding boot entry for configuration..."
            sudo nixos-rebuild switch
        case boot
            log_step "Building and adding boot entry for configuration..."
            sudo nixos-rebuild boot
        case test
            log_step "Building and activating configuration..."
            sudo nixos-rebuild --fast test
            test -z $_flag_keep_result && clean
        case build
            log_step "Building configuration..."
            nixos-rebuild build --flake "$flakeRoot#$flakeAttr"
            test -z $_flag_keep_result && clean
    end
end

function update
    log_step "Updating flake inputs..."
    set lastCommit (git log --format=%h -1)
    nix flake update --recreate-lock-file --commit-lock-file
    if test lastCommit != (git log --format=%h -1)
        # Print which inputs were updated
        log_ok "Updated inputs:"
        git log --format=%B -1 | grep Updated | sed "s/\* Updated '\(.*\)': '.*\([0-9a-f]\{7\}\)[0-9a-f]\{33\}' -> '.*\([0-9a-f]\{7\}\)[0-9a-f]\{33\}'/     \1: \2 -> \3/"
    else
        # No flake inputs were changed
        log_ok "No flake inputs were updated."
    end
end

function shell
    nix develop $flakeRoot $argv
end

function repl
    nix repl $flakeRoot/repl.nix --argstr hostname (hostname)
end

function git
    command git -C $flakeRoot $argv
end

function upgrade
    update
    switch_
end

function gc
    log_step "Removing unreachable store paths..."
    nix-collect-garbage
end

function GC
    if test -z $argv[1]
        set period 60
    else
        set period $argv[1]
    end
    log_step "Removing generations older than $period days..."
    sudo nix-collect-garbage --delete-older-than {$period}d
end

function install
    # Validate arguments
    if test -z $argv[1]
        log_error "No device name given."
        exit 121
    end

    test -z $_flag_no_check && check

    set prefix /mnt
    # Check for device config
    log_step "Bootstrapping configuration for this device..."
    if not mountpoint -q $prefix
        log_error "Nothing mounted at /mnt."
        exit 1
    else if not test -f $flakeRoot/hosts/$argv[1]/default.nix
        log_error "No device configuration found for $argv[1]."
    end

    log_minor "Generating hardware configuration..."
    nixos-generate-config --show-hardware-config >$flakeRoot/hosts/$argv[1]/hardware-configuration.nix
    # Commit since tree needs to be clean
    git add hosts/$argv[1]/hardware-configuration.nix
    git commit -m "Add device config for $argv[1]"

    # Build and install config
    log_step "Building config and installing to to $prefix..."
    sudo nixos-install --root $prefix --flake $flakeRoot#$argv[1]
    log_ok "Done installing. You can reboot into the installed system."
end

# Parse flags and make them global
argparse -s C/no-check r/review k/keep-result -- $argv
set -g _flag_no_check $_flag_no_check
set -g _flag_keep_result $_flag_keep_result

# Set rebuild function based on -r flag
if test -z $_flag_review
    set rebuild _rebuild
else
    set rebuild _rebuild_after_review
end

# Parse rest of arguments
switch $argv[1]
    case clean check update upgrade gc repl
        $argv[1]
    case shell git GC install
        $argv[1] $argv[2..-1]
    case switch boot test build
        $rebuild $argv[1]
    case s
        $rebuild switch
    case b
        $rebuild boot
    case t
        $rebuild test
    case sh
        shell $argv[2..-1]
    case up
        upgrade
        $rebuild switch
    case ub
        update
        $rebuild boot
    case ut
        update
        $rebuild test
    case help ''
        usage
    case '*'
        log_error "Unknown verb: $argv[1]"
        exit 121
end

# vim: set ft=fish:
