#!/usr/bin/env fish

# Like https://github.com/Shopify/comma, but using nix flakes.

set _dir (dirname (status filename))
source $_dir/_lib.fish

check_progs nix-locate

set dict _comma_choice

function help
    echo "comma: Run software from nixpkgs without installing it.

"$bold"Usage:"$resf" , [flags] cmd [args]

"$bold"Flags:"$resf"
    -k, --forget cmd    Forget package used for cmd (or all if cmd is '!')
    -y, --yes           Use remembered choice for cmd
    -n, --dry-run       Just print what would be run"
end

function locate_attr
    # Use nix-locate to find the right package
    set -g attr (nix-locate --top-level --minimal --at-root --whole-name "/bin/$argv[1]")
    if test (count $attr) -eq 0
        log_error "No match."
        exit 1
    else if test (count $attr) -gt 1
        # If there are multiple candidates, first check if we've tried to run this binary before
        # Useful for running the same command several times
        if dict_query $dict $input
            if not test -z $yes; or ask_yesno -y "Use nixpkgs#"(dict_get $dict $input)" from before?"
                set -g attr (dict_get $dict $input)
            end
        else
            log_minor "Found multiple packages. Select one."
            set -g attr (for a in $attr; echo $a; end | fzf --reverse --height 10)
            # Remember this selection for next time
            not test -z $attr; and dict_set $dict $input $attr
        end
    end
    if test -z $attr
        log_error "No package selected."
        exit 1
    end
end

function exec_attr
    log_ok "Running with nixpkgs#$attr..."
    if test -z $dry_run
        nix shell "nixpkgs#$attr" -c $argv
    else
        echo nix shell "nixpkgs#$attr" -c $argv
    end
end

function _run
    set -g input $argv[1]
    log_step "Looking for packages with /bin/$input..."
    locate_attr $input
    exec_attr $argv
end


# Entry point
argparse -s n/dry-run 'k/forget=' y/yes -- $argv
or return
set -g dry_run $_flag_dry_run
set -g yes $_flag_yes

if not test -z $_flag_forget
    if test $_flag_forget = '!'
        dict_clear $dict
    else
        dict_clear $dict $_flag_forget
    end
    exit 0
end

switch $argv[1]
    case ''
        help
    case '*'
        _run $argv
end
